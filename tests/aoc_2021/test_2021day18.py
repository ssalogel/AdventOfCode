from src.AoC2021.Day18 import Day18, Snailfish
import pytest


@pytest.mark.parametrize("test_input,expected", [
    ([1, 2], "[1, 2]"),
    ([[1, 2], 3], "[[1, 2], 3]"),
    ([9, [8, 7]], "[9, [8, 7]]"),
    ([[1, 9], [8, 5]], "[[1, 9], [8, 5]]"),
    ([[[[1, 2], [3, 4]], [[5, 6], [7, 8]]], 9], "[[[[1, 2], [3, 4]], [[5, 6], [7, 8]]], 9]"),
    ([[[9, [3, 8]], [[0, 9], 6]], [[[3, 7], [4, 9]], 3]], "[[[9, [3, 8]], [[0, 9], 6]], [[[3, 7], [4, 9]], 3]]"),
    ([[[[1, 3], [5, 3]], [[1, 3], [8, 7]]], [[[4, 9], [6, 9]], [[8, 2], [7, 3]]]],
     "[[[[1, 3], [5, 3]], [[1, 3], [8, 7]]], [[[4, 9], [6, 9]], [[8, 2], [7, 3]]]]")
])
def test_snailfish_repr(test_input, expected):
    assert Snailfish(test_input).__repr__() == expected


@pytest.mark.parametrize("test_input, expected", [
    ([[[[[9, 8], 1], 2], 3], 4], "[[[[0, 9], 2], 3], 4]"),
    ([7, [6, [5, [4, [3, 2]]]]], "[7, [6, [5, [7, 0]]]]"),
    ([[6, [5, [4, [3, 2]]]], 1], "[[6, [5, [7, 0]]], 3]"),
    ([[3, [2, [1, [7, 3]]]], [6, [5, [4, [3, 2]]]]], "[[3, [2, [8, 0]]], [9, [5, [7, 0]]]]"),
])
def test_explodes(test_input, expected):
    s = Snailfish(test_input)
    s.explode()
    assert s.__repr__() == expected


@pytest.mark.parametrize("test_input, expected", [
    ([[1, 1], [2, 2], [3, 3], [4, 4]], "[[[[1, 1], [2, 2]], [3, 3]], [4, 4]]"),
    ([[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]], "[[[[3, 0], [5, 3]], [4, 4]], [5, 5]]"),
    ([[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6]], "[[[[5, 0], [7, 4]], [5, 5]], [6, 6]]"),
    ([[[[0, [4, 5]], [0, 0]], [[[4, 5], [2, 6]], [9, 5]]],
      [7, [[[3, 7], [4, 3]], [[6, 3], [8, 8]]]],
      [[2, [[0, 8], [3, 4]]], [[[6, 7], 1], [7, [1, 6]]]],
      [[[[2, 4], 7], [6, [0, 5]]], [[[6, 8], [2, 8]], [[2, 1], [4, 5]]]],
      [7, [5, [[3, 8], [1, 4]]]],
      [[2, [2, 2]], [8, [8, 1]]],
      [2, 9],
      [1, [[[9, 3], 9], [[9, 0], [0, 7]]]],
      [[[5, [7, 4]], 7], 1],
      [[[[4, 2], 2], 6], [8, 7]]], "[[[[8, 7], [7, 7]], [[8, 6], [7, 7]]], [[[0, 7], [6, 6]], [8, 7]]]"),
])
def test_adds(test_input, expected):
    assert sum([Snailfish(t) for t in test_input[1:]], start=Snailfish(test_input[0])).__repr__() == expected


@pytest.mark.parametrize("test_input, expected", [
    ([9, 1], 29),
    ([1, 9], 21),
    ([[9, 1], [1, 9]], 129),
    ([[1, 2], [[3, 4], 5]], 143),
    ([[[[0, 7], 4], [[7, 8], [6, 0]]], [8, 1]], 1384),
    ([[[[1, 1], [2, 2]], [3, 3]], [4, 4]], 445),
    ([[[[3, 0], [5, 3]], [4, 4]], [5, 5]], 791),
    ([[[[5, 0], [7, 4]], [5, 5]], [6, 6]], 1137),
    ([[[[8, 7], [7, 7]], [[8, 6], [7, 7]]], [[[0, 7], [6, 6]], [8, 7]]], 3488)
])
def test_magnitude(test_input, expected):
    assert Snailfish(test_input).get_magnitude() == expected


def test_part1():
    test_input = """[[[0,[5,8]],[[1,7],[9,6]]],[[4,[1,2]],[[1,4],2]]]
[[[5,[2,8]],4],[5,[[9,9],0]]]
[6,[[[6,2],[5,6]],[[7,6],[4,7]]]]
[[[6,[0,7]],[0,9]],[4,[9,[9,0]]]]
[[[7,[6,4]],[3,[1,3]]],[[[5,5],1],9]]
[[6,[[7,3],[3,2]]],[[[3,8],[5,7]],4]]
[[[[5,4],[7,7]],8],[[8,3],8]]
[[9,3],[[9,9],[6,[4,9]]]]
[[2,[[7,7],7]],[[5,8],[[9,3],[0,2]]]]
[[[[5,2],5],[8,[3,7]]],[[5,[7,5]],[4,4]]]"""

    d = Day18(content=test_input)
    assert d.part1(d.parse_content(d.content)) == 4140


def test_part2():
    test_input = """[[[0,[5,8]],[[1,7],[9,6]]],[[4,[1,2]],[[1,4],2]]]
[[[5,[2,8]],4],[5,[[9,9],0]]]
[6,[[[6,2],[5,6]],[[7,6],[4,7]]]]
[[[6,[0,7]],[0,9]],[4,[9,[9,0]]]]
[[[7,[6,4]],[3,[1,3]]],[[[5,5],1],9]]
[[6,[[7,3],[3,2]]],[[[3,8],[5,7]],4]]
[[[[5,4],[7,7]],8],[[8,3],8]]
[[9,3],[[9,9],[6,[4,9]]]]
[[2,[[7,7],7]],[[5,8],[[9,3],[0,2]]]]
[[[[5,2],5],[8,[3,7]]],[[5,[7,5]],[4,4]]]"""

    d = Day18(content=test_input)
    assert d.part2(d.parse_content(d.content)) == 3993


def test_actual_input():
    with open('./tests/aoc_2021/data/2021day18.txt', 'r') as file:
        content = file.read().strip()
    d = Day18(content="test")
    assert d.part1(d.parse_content(content)) == 4417
    assert d.part2(d.parse_content(content)) == 4796
